module An where

import Data.List (partition)

import Text.LaTeX (Texy(texy), render)
import Text.LaTeX.Base.Class (LaTeXC, liftL)
import Text.LaTeX.Base.Syntax (LaTeX(TeXRaw, TeXComm), TeXArg(FixArg, MSymArg))
import Text.LaTeX.Packages.Beamer (OverlaySpec(FromSlide, ToSlide, FromToSlide, OneSlide), only, onslide, uncover, visible, invisible, alert)


data EffectName
  = Vis
  | Invis
  | Alert
  | Only
  | OnSlide
  | Uncover
  | Shade
  deriving (Eq,Show)

data RangeIndicator
  = B                 -- ^ begin
  | E                 -- ^ end
  | BE                -- ^ begin end
  deriving (Eq,Show)

type Slide = Int

type Effect = (Slide, RangeIndicator, EffectName)

type Annotation = [Effect]

data An a =
  An
  { annot :: Annotation
  , info  :: a
  }
  deriving (Eq,Show)

findEnd :: EffectName -> [Effect] -> Maybe (Slide, [Effect])
findEnd x lst = findEndAux x lst 0 []

findEndAux :: EffectName -> [Effect] -> Slide -> [Effect] -> Maybe (Slide, [Effect])
findEndAux x (k@(_,B,y):ks)   n acc | x == y = findEndAux x ks (n+1) (k:acc)
findEndAux x ((slide,E,y):ks) 0 acc | x == y = Just (slide,reverse acc ++ ks)
findEndAux x (k@(_,E,y):ks)   n acc | x == y = findEndAux x ks (n-1) (k:acc)
findEndAux x (k:ks)           n acc          = findEndAux x ks n (k:acc)
findEndAux _ []               _ _            = Nothing

attrsFun :: LaTeXC l => [Effect] -> l -> l
attrsFun lst =
  attrsFun'' (attrsFun' lst)

attrsFun'' :: LaTeXC l => [(EffectName, OverlaySpec)] -> l -> l
attrsFun'' [] = id
attrsFun'' lst@((action, _) : _) =
  fun action (map snd lst1) . attrsFun'' lst2
  where
    (lst1, lst2) = partition ((== action) . fst) lst
    
    fun x = case x of
             Only    -> only
             OnSlide -> onslide
             Uncover -> uncover
             Vis     -> visible
             Invis   -> invisible
             Alert   -> alert
             Shade   -> bgyellow

attrsFun' :: [Effect] -> [(EffectName, OverlaySpec)]
attrsFun' [] = []
attrsFun' ((slide,pos,x):as) =
  (x, overlaySpec) : attrsFun' rest
  where
    (overlaySpec,rest) = case pos of
                          B  -> case findEnd x as of
                                 Just (slide',as') ->
                                   (FromToSlide slide slide', as')
                                 Nothing ->
                                   (FromSlide slide, as)
                          E  -> (ToSlide slide, as)
                          BE -> (OneSlide slide, as)

bgyellow :: LaTeXC l => [OverlaySpec] -> l -> l
bgyellow os =
  liftL $ \l -> TeXComm "bgyellow" [ MSymArg $ fmap (TeXRaw . render) os , FixArg l ]


instance Texy a => Texy (An a) where
  texy (An attrs x) = attrsFun attrs (texy x)

instance Functor An where
  fmap f (An an x) = An an (f x)

